[Project 3 - README]

[Members] 
Cong Liu (cs120sax)
Christopher B Lew (clew)

[Code]
	- VM Kernel,
	For the VM Kernel, we wrote 3 classes: PageFrame, 
	Swapper, and the Kernel class. 
		- The PageFrame class
		is the wrapper for entries into the Inverted Page
		Table that maps to a specific process, and it is 
		also used to keep track of pinned pages.
		- Swapper,
		The handler for the details regarding the swapping
		of page frames. The Swapper handle the swapping in,
		swapping out, and managing the swap file on disk.
		- The VM kernel allocates space in the TLB for 
		entries, translates swapped files, decides which
		entries to be swapped via the clock algorithm, 
		and synchronizes the inverted page table with
		the page tables, and TLB.

	-VM Process,
	For the VM Process, we added on to the UserProcess
	which it extends, but this time, we handle both a TLB
	and a swap file which includes page fault exceptions,
	and TLBMiss exceptions. When the process loads data
	to memory, it has three options depending on the case.
	It will either pull data from the swap file, load from
	the coff, or load to the stack. When the TLB Handler is
	callsed, the Kernel handles the exception and appropriatly
	modifies the TLB, and when the page fault handler is called,
	the Kernel appropriately swaps in and out data to and from
	memory.

	- User Process,
	We modified the UserProcess to handle page pinning.

[How Well it Worked/How You Tested Your Code/Contributions]
	- We were able to create coff files to emulate the tests
	given by the autograder. In this we created tests that would
	read and write more than we had memory to store, seeing 
	that it would go to the swap file. We tested the clock algorithm
	for replacement. We also unit tested the functionality of 
	certain milestones such as page pinning, and page faulting.
	It worked well on the tests, and the autograder.
	- Cong focused on the TLB Management, Lazy Loading, Debugging,
	and testing, while Chris focuesed on the Demand Paging, Debugging,
	and testing.